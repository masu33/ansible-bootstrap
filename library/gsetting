#!/usr/bin/python

import json
import subprocess

from ansible.module_utils.basic import AnsibleModule

def _get_value(user, schema, key):

    command = " ".join([
        'export `/usr/bin/dbus-launch`',
        ';',
        '/usr/bin/gsettings get', schema, key,
        ';',
        'kill $DBUS_SESSION_BUS_PID &> /dev/null'
    ])

    return subprocess.check_output([
        'su', '-', user , '-c', command
    ]).strip()

def _set_value(user, schema, key, value):

    old_value = _get_value(user, schema, key)

    changed = old_value not in [value, "'" + value + "'"]

    command = " ".join([
        'export `/usr/bin/dbus-launch`',
        ';',
        '/usr/bin/gsettings set', schema, key,
        "'%s'" % value.replace("'", r"\'"),
        ';',
        'kill $DBUS_SESSION_BUS_PID &> /dev/null'
    ])

    result = subprocess.check_output([
        'su', '-', user , '-c', command
    ]).strip()

    return changed, old_value

def _reset_value(user, schema, key):
    
    old_value = _get_value(user, schema, key)
        
    command = " ".join([
        'export `/usr/bin/dbus-launch`',
        ';',
        '/usr/bin/gsettings reset', schema, key,
        ';',
        'kill $DBUS_SESSION_BUS_PID &> /dev/null'
    ])

    result = subprocess.check_output([
        'su', '-', user , '-c', command
    ]).strip()

    value = _get_value(user, schema, key)

    return value != old_value, old_value, value

def main():

    module = AnsibleModule(
        argument_spec={
            'user':   { 'required': True },
            'schema': { 'required': True },
            'key':    { 'required': True },
            'value':  { 'required': True },
            'state':  { 'choices': [ 'present',
                                     'reset' ],
                        'default': 'present'
                      },

        },
        supports_check_mode = True,
    )

    params = module.params
    state = module.params['state']
    user = module.params['user']
    schema = module.params['schema']
    key = module.params['key']
    value = module.params['value']

    if module.check_mode:
        changed = False
        if state == 'present':
            old_value = _get_value(user, schema, key)
        elif state == 'reset':
            old_value = value = _get_value(user, schema, key)
    else:
        if state == 'present':
            changed, old_value = _set_value(user, schema, key, value)
        elif state == 'reset' and value == 'reset':
            changed, old_value, value = _reset_value(user, schema, key)

    print(json.dumps({
        'changed': changed,
        'schema': schema,
        'key': key,
        'value': value,
        'old_value': old_value,
    }))

main()
