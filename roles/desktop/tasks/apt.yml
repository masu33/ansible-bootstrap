---

- name: "APT: Set debconfs"
  become: yes
  debconf:
    name: "{{ item.name }}"
    question: "{{ item.question }}"
    vtype: "{{ item.vtype }}"
    value: "{{ item.value }}"
  with_items: "{{ debconfs }}"

- name: "APT: Set repository keys with keyserver"
  become: yes
  apt_key:
    keyserver: "{{ item.keyserver | d('keyserver.ubuntu.com') }}"
    state: "{{ item.state | d('present') }}"
    id: "{{ item.key }}"
  with_items:
    - "{{ repos |
          selectattr('key', 'defined') |
          list }}"

- name: "APT: Set repository keys with GPG keys"
  become: yes
  apt_key:
    state: "{{ item.state | d('present') }}"
    url: "{{ item.key_url }}"
  with_items:
    - "{{ repos |
          selectattr('key_url', 'defined') |
          list }}"

- name: "APT: Set repositories"
  become: yes
  apt_repository:
    mode: 644
    repo: "{{ item.repo | d(item) }}"
    state: "{{ item.state | d('present') }}"
    update_cache: false
  with_items: "{{ repos }}"

- name: "APT: Update cache"
  become: yes
  apt:
    update_cache: yes

- name: "APT: Removing packages"
  become: yes
  apt:
    name: "{{ item }}"
    state: absent
    autoremove: "{{ autoremove | d('yes') }}"
  with_items: "{{ packages |
                  selectattr('state', 'defined') |
                  selectattr('state', 'equalto', 'absent') |
                  map(attribute='name') |
                  list }}"

- name: "APT: Installing packages"
  become: yes
  apt:
    name: "{{ item.name | d(item) }}"
    state: "{{ item.state | d('present') }}"
  with_items:
    - "{{ packages |
          selectattr('state', 'undefined') |
          list }}"
    - "{{ packages |
          selectattr('state', 'defined') |
          rejectattr('state', 'equalto', 'absent') |
          list }}"

- name: "PIP: Set python2 packages"
  become: yes
  pip:
    executable: pip
    name: "{{ item.name | d(item) }}"
    state: "{{ item.state | d('present') }}"
  with_items: "{{ pip2_packages | d([], True) }}"

- name: "PIP: Set python3 packages"
  become: yes
  pip:
    executable: pip3
    name: "{{ item.name | d(item) }}"
    state: "{{ item.state | d('present') }}"
  with_items: "{{ pip3_packages | d([], True) }}"

- name: "APT: Upgrade"
  when: "{{ (upgrade | d('no')) == 'yes' }}"
  become: yes
  apt:
    upgrade: "{{ upgrade | d('no') }}"
