---

- assert:
    that:
      - "( ( settings is defined )
       and ( settings is sequence )
         )"
    msg: "settings should be defined and sequence"

- assert:
    that:
      - "{{ settings
          | forall
          | selectattr('user', 'undefined')
          | list
          == []
         }}"
      - "{{ settings
          | forall
          | rejectattr('user', 'user_exists')
          | list
          == []
         }}"
    msg: "the user key should be defined as an existing user"

- assert:
    that:
      - "{{ settings
          | forall
          | selectattr('password', 'undefined')
          | list
          == []
         }}"
    msg: "the password key should be defined"

- assert:
    that:
      - "{{ settings
          | forall
          | map('list')
          | sum(start=[])
          | reject('equalto', 'user')
          | reject('equalto', 'password')
          | reject('in', vncserver_key_args)
          | reject('in', vncserver_flag_args)
          | list
          == []
         }}"
    msg: "{{ 'invalid keys found: '
           + ', '.join( settings
                      | forall
                      | map('list')
                      | sum(start=[])
                      | reject('equalto', 'user')
                      | reject('equalto', 'password')
                      | reject('in', vncserver_key_args)
                      | reject('in', vncserver_flag_args)
                      | list
                      )
           + '; '
           + 'possible keys: '
           + ', '.join((vncserver_key_args | d([])) + (vncserver_flag_args | d([])))
          }}"

- name: "Create folder"
  become: yes
  become_user: "{{ __login.user }}"
  file:
    path:  "{{ __login.folder | d((__login.user | user_home) + '/.vnc') }}"
    mode: "0700"
    state: directory
  with_items: "{{ settings
                | forall
                | map('combine', {'password': '***'})
                | list
               }}"
  loop_control:
    loop_var: "__login"

- name: "Set passwords"
  become: yes
  become_user: "{{ __login.user }}"
  vncpassword:
    password: "{{ __login.password }}"
    path:     "{{ __login.folder | d((__login.user | user_home) + '/.vnc') }}/passwd"
  no_log: yes
  with_items: "{{ settings
                | forall
                | list
               }}"
  loop_control:
    loop_var: "__login"

- name: "Copy the xstartup file"
  become: yes
  become_user: "{{ __login.user }}"
  template:
    src: xstartup.j2
    dest: "{{ __login.folder | d((__login.user | user_home) + '/.vnc') }}/xstartup"
    mode: "0700"
  with_items: "{{ settings
                | forall
                | map('combine', {'password': '***'})
                | list
               }}"
  loop_control:
    loop_var: "__login"

- name: "Create a file vncserver in /etc/init.d/ directory"
  become: yes
  template:
    src: vncserver.j2
    dest: /etc/init.d/vncserver
    owner: "{{ root_user | d('root') }}"
    group: "{{ root_user | d('root') }}"
    mode: "0755"
  vars:
    settings: "{{ settings
                | forall
                | map('combine', {'password': '***'})
                | list
               }}"
  register: vnc_service

- name: "Add vncserver service to default runlevels"
  become: yes
  command: "update-rc.d vncserver defaults"
  when: vnc_service.changed

- name: "Restart VNC Service"
  become: yes
  service:
    name: vncserver
    state: restarted
  when: vnc_service.changed
