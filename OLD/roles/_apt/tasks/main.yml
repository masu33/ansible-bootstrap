---

- assert:
    that:
      - "( ( debconfs is undefined )
        or ( debconfs is sequence )
         )"
    msg:
      - "debconfs should be undefined or sequence"

- assert:
    that:
      - "( ( repos is undefined )
        or ( repos is sequence )
         )"
    msg:
      - "packages should be undefined or sequence"

- assert:
    that:
      - "( ( packages is undefined )
        or ( packages is sequence )
         )"
    msg:
      - "packages should be undefined or sequence"

- name: "Set debconfs"
  become: yes
  debconf:
    name:     "{{ __debconf.name     }}"
    question: "{{ __debconf.question }}"
    vtype:    "{{ __debconf.vtype    }}"
    value:    "{{ __debconf.value    }}"
  with_items: "{{ debconfs
                | d([])
                | list
               }}"
  loop_control:
    loop_var: "__debconf"

- name: "Set repository keys with keyserver"
  become: yes
  apt_key:
    state:     "{{ __repo.state | d('present') }}"
    keyserver: "{{ __repo.keyserver            }}"
    id:        "{{ __repo.key                  }}"
  with_items: "{{ repos
                | d([])
                | selectattr('key', 'defined')
                | list
               }}"
  loop_control:
    loop_var: "__repo"

- name: "Set repository keys with GPG keys"
  become: yes
  apt_key:
    state: "{{ __repo.state   | d('present') }}"
    url:   "{{ __repo.key_url                }}"
  with_items: "{{ repos
                | d([])
                | selectattr('key_url', 'defined')
                | list
               }}"
  loop_control:
    loop_var: "__repo"

- name: "Set repositories"
  become: yes
  apt_repository:
    mode:  "0664"
    repo:  "{{ __repo.repo            }}"
    state: "{{ __repo.state | d(omit) }}"
    update_cache: no
  with_items: "{{ repos
                | d([])
               }}"
  loop_control:
    loop_var: "__repo"
  register: "repos_state"

- name: "Update cache"
  when: repos_state | changed
  become: yes
  apt:
    update_cache: yes

- name: "Packages..."
  become: yes
  apt:
    allow_unauthenticated: "{{ __package.allow_unauthenticated | d(omit) }}"
    cache_valid_time:      "{{ __package.cache_valid_time      | d(omit) }}"
    deb:                   "{{ __package.deb                   | d(omit) }}"
    default_release:       "{{ __package.default_release       | d(omit) }}"
    dpkg_options:          "{{ __package.dpkg_options          | d(omit) }}"
    force:                 "{{ __package.force                 | d(omit) }}"
    install_recommends:    "{{ __package.install_recommends    | d(omit) }}"
    name:                  "{{ __package.name                  | d(omit) }}"
    purge:                 "{{ __package.purge                 | d(omit) }}"
    state:                 "{{ __package.state                 | d(omit) }}"
  with_items: "{{ packages
                | d([])
               }}"
  loop_control:
    loop_var: "__package"

- name: "Others"
  when: "( ( autoremove | d(false) )
        or ( purge      | d(false) )
        or ( upgrade    | d(false) )
         )"
  become: yes
  apt:
    autoremove: "{{ autoremove | d(omit) }}"
    purge:      "{{ purge      | d(omit) }}"
    upgrade:    "{{ upgrade    | d(omit) }}"

- name: "NPM"
  when: npm is defined
  become: yes
  apt:
    name: "{{ item }}"
    state: present
  with_items:
    - npm
    - nodejs
    - nodejs-legacy

- name: "NPM version"
  when: npm is defined
  become: yes
  shell: "npm -g ls npm@latest"
  register: npm_version_pre
  changed_when: false

- name: "NPM latest"
  when: npm is defined
  become: yes
  shell: "npm -g install npm@latest"
  register: npm_version_post
  changed_when: ( npm_version_pre.stdout_lines | select('match', '.* npm@.*') == [] )
                or
                ( npm_version_pre.stdout_lines | select('match', '.* npm@.*')
                  ==
                  npm_version_post.stdout_lines | select('match', '.* npm@.*')
                )

- name: "NPM packages"
  when: npm is defined
  become: yes
  npm:
    executable:     "{{ __package.executable     | d(omit) }}"
    global:         "{{ __package.global         | d(omit) }}"
    ignore_scripts: "{{ __package.ignore_scripts | d(omit) }}"
    name:           "{{ __package.name           | d(omit) }}"
    path:           "{{ __package.path           | d(omit) }}"
    production:     "{{ __package.production     | d(omit) }}"
    registry:       "{{ __package.registry       | d(omit) }}"
    state:          "{{ __package.state          | d(omit) }}"
    version:        "{{ __package.version        | d(omit) }}"
  with_items: "{{ npm
                | d([])
               }}"
  loop_control:
    loop_var: "__package"
